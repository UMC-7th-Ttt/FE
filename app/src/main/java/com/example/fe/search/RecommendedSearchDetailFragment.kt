package com.example.fe.search

import HomeFragment
import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import androidx.fragment.app.commit
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.fe.JohnRetrofitClient
import com.example.fe.MainActivity
import com.example.fe.R
import com.example.fe.databinding.FragmentRecommendedSearchDetailBinding
import com.example.fe.search.api.BookSuggestionResponse
import com.example.fe.bookclub_place.api.RetrofitClient
import com.example.fe.scrap.api.ScrapAPI
import com.example.fe.search.api.BookEditorPickResponse
import com.example.fe.search.api.BookSearchAPI
import com.example.fe.search.api.BookUserSuggestionResponse
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class RecommendedSearchDetailFragment : Fragment() {

    private lateinit var binding: FragmentRecommendedSearchDetailBinding

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        binding = FragmentRecommendedSearchDetailBinding.inflate(inflater, container, false)

        val categoryTitle = arguments?.getString("CATEGORY_TITLE", "Ï∂îÏ≤ú Í≤ÄÏÉâ") ?: "Ï∂îÏ≤ú Í≤ÄÏÉâ"
        binding.recommendedSearchDetailTitleTv.text = categoryTitle


        initBackBtnClickListener()
        initHomeBtnClickListener()
        initPopularBookListRV(categoryTitle)
        initRecommendedBookListRV()
        initEditorPickBookListRV()

        return binding.root
    }

    private fun initBackBtnClickListener() {
        binding.recommendedSearchDetailBackIv.setOnClickListener {
            parentFragmentManager.popBackStack()
        }
    }

    private fun initHomeBtnClickListener() {
        binding.recommendedSearchDetailHomeIv.setOnClickListener {
            // MainActivityÎ°ú Ïù¥ÎèôÌïòÎ©¥ÏÑú GO_HOME ÌîåÎûòÍ∑∏Î•º Î™ÖÌôïÌûà ÏÑ§Ï†ï
            val mainActivityIntent = Intent(requireActivity(), MainActivity::class.java)
            mainActivityIntent.putExtra("GO_HOME", true) // üöÄ Ìôà Ïù¥Îèô ÌîåÎûòÍ∑∏ ÏÑ§Ï†ï

            startActivity(mainActivityIntent)

            // SearchMainActivity Ï¢ÖÎ£å
            requireActivity().finish()
        }
    }

    private fun initPopularBookListRV(categoryTitle: String) {
        val categoryName = when (categoryTitle) {
            "ÌïúÍµ≠ Î¨∏Ìïô" -> "koreanLiterature"
            "Ïù∏Î¨∏" -> "humanities"
            "ÏûêÍ∏∞ Í≥ÑÎ∞ú" -> "selfDevelopment"
            "ÏóêÏÑ∏Ïù¥/Ïó¨Ìñâ" -> "essayAndTravel"
            "ÏÇ¨Ìöå/ÏûêÏó∞ Í≥ºÌïô" -> "socialAndNaturalSciences"
            "ÏÑ∏Í≥Ñ Î¨∏Ìïô" -> "worldLiterature"
            else -> "koreanLiterature"
        }

        val api = JohnRetrofitClient.getClient(requireContext()).create(BookSearchAPI::class.java)
        api.getBookSuggestions(categoryName).enqueue(object : Callback<BookSuggestionResponse> {
            override fun onResponse(call: Call<BookSuggestionResponse>, response: Response<BookSuggestionResponse>) {
                if (response.isSuccessful) {
                    val bookList = response.body()?.result?.books ?: emptyList()
                    val bookAdapter = PopularBookListRVAdapter(requireContext(), bookList)
                    binding.popularBookListRv.adapter = bookAdapter
                    binding.popularBookListRv.layoutManager = LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false)
                } else {
                    Log.e("API Error", "${response.errorBody()?.string()}")
                }
            }

            override fun onFailure(call: Call<BookSuggestionResponse>, t: Throwable) {
                Log.e("Network Error", "${t.message}")
            }
        })
    }

    private fun initRecommendedBookListRV() {
        val api = JohnRetrofitClient.getClient(requireContext()).create(BookSearchAPI::class.java)
        api.getUserBookSuggestions()
            .enqueue(object : Callback<BookUserSuggestionResponse> {
                override fun onResponse(call: Call<BookUserSuggestionResponse>, response: Response<BookUserSuggestionResponse>) {
                    if (response.isSuccessful) {
                        val result = response.body()?.result

                        val memberNickname = result?.memberNickname ?: "ÏÇ¨Ïö©Ïûê"

                        // memberNicknameÏùÑ recommended_book_intro_tvÏóê Ï†ÅÏö©
                        binding.recommendedBookIntroTv.text = "${memberNickname}ÎãòÏùò ÎßûÏ∂§ Ï∂îÏ≤ú ÎèÖÏÑúÎ•º Ï¶êÍ≤®Î¥êÏöî!"


                        val bookList = result?.books ?: emptyList()
                        val bookAdapter = RecommendedBookListRVAdapter(requireContext(), bookList)
                        binding.recommendedBookListRv.adapter = bookAdapter
                        binding.recommendedBookListRv.layoutManager =
                            LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false)

                    } else {
                        Log.e("API Error", "‚ùå ${response.errorBody()?.string()}")
                    }
                }

                override fun onFailure(call: Call<BookUserSuggestionResponse>, t: Throwable) {
                    Log.e("Network Error", "‚ùå ${t.message}")
                }
            })
    }

    private fun initEditorPickBookListRV() {
        val api = JohnRetrofitClient.getClient(requireContext()).create(BookSearchAPI::class.java)
        api.getEditorPickBooks()
            .enqueue(object : Callback<BookEditorPickResponse> {
                override fun onResponse(call: Call<BookEditorPickResponse>, response: Response<BookEditorPickResponse>) {
                    if (response.isSuccessful) {
                        val result = response.body()?.result

                        val bookLetterTitle = result?.bookLetterTitle ?: "Î∂ÅÎ†àÌÑ∞ Ìïú Ï§Ñ"

                        val bookList = result?.books ?: emptyList()
                        val bookAdapter = EditorPickBookListRVAdapter(requireContext(), bookList, bookLetterTitle)
                        binding.editorPickBookListRv.adapter = bookAdapter
                        binding.editorPickBookListRv.layoutManager =
                            LinearLayoutManager(requireContext(), LinearLayoutManager.VERTICAL, false)
                    } else {
                        Log.e("API Error", "‚ùå ${response.errorBody()?.string()}")
                    }
                }

                override fun onFailure(call: Call<BookEditorPickResponse>, t: Throwable) {
                    Log.e("Network Error", "‚ùå ${t.message}")
                }
            })
    }
}